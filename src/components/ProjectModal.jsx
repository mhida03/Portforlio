import React from 'react';
import { Modal, Button } from 'react-bootstrap';
import { motion, AnimatePresence } from 'framer-motion';

const ProjectModal = ({ project, show, onHide }) => {
  const getCategoryColor = (category) => {
    const colors = {
      'AI & Vision': '#6f42c1',
      'Symfony / DevOps': '#fd7e14',
      'Java & Spring': '#28a745',
      'Full-stack': '#007bff',
      'DevOps': '#dc3545',
      'default': '#6c757d'
    };
    return colors[category] || colors.default;
  };

  const getCategoryIcon = (category) => {
    const icons = {
      'AI & Vision': 'ü§ñ',
      'Symfony / DevOps': '‚öôÔ∏è',
      'Java & Spring': '‚òï',
      'Full-stack': 'üåê',
      'DevOps': 'üöÄ',
      'default': 'üíª'
    };
    return icons[category] || icons.default;
  };

  const getProjectDetails = (project) => {
    // Extended project details based on the project title
    const details = {
      'OptiTry ‚Äì Essayage AR & IA de lunettes': {
        description: "Plateforme innovante d'essayage virtuel de lunettes utilisant la r√©alit√© augment√©e et l'intelligence artificielle pour offrir une exp√©rience d'achat personnalis√©e.",
        features: [
          "Essayage virtuel en temps r√©el via webcam",
          "Recommandations bas√©es sur la morphologie du visage",
          "Dashboard analytics pour les opticiens",
          "Interface utilisateur intuitive et responsive",
          "Int√©gration avec syst√®mes de gestion existants"
        ],
        challenges: [
          "D√©tection pr√©cise des points faciaux",
          "Optimisation des performances en temps r√©el",
          "Adaptation aux diff√©rents types de cam√©ras",
          "Gestion des variations d'√©clairage"
        ],
        results: [
          "Am√©lioration de l'exp√©rience client",
          "R√©duction des retours produits",
          "Augmentation des ventes en ligne",
          "Donn√©es analytiques pr√©cieuses pour les opticiens"
        ]
      },
      'CRM Symfony & DevOps': {
        description: "Syst√®me de gestion de la relation client complet avec pipeline DevOps automatis√©, monitoring en temps r√©el et architecture s√©curis√©e.",
        features: [
          "Gestion compl√®te des clients et prospects",
          "Syst√®me de facturation int√©gr√©",
          "Authentification s√©curis√©e multi-niveaux",
          "Pipeline CI/CD automatis√©",
          "Monitoring et alertes en temps r√©el",
          "D√©ploiement containeris√© avec Docker"
        ],
        challenges: [
          "Architecture microservices scalable",
          "S√©curisation des donn√©es sensibles",
          "Automatisation compl√®te du d√©ploiement",
          "Monitoring proactif des performances"
        ],
        results: [
          "R√©duction du temps de d√©ploiement de 80%",
          "Am√©lioration de la s√©curit√© des donn√©es",
          "Monitoring proactif des incidents",
          "Scalabilit√© automatique selon la charge"
        ]
      },
      'D√©tection de type de sol (IA)': {
        description: "Projet de classification d'images utilisant l'apprentissage automatique pour identifier diff√©rents types de sols √† partir de photographies.",
        features: [
          "Classification automatique d'images de sols",
          "Mod√®le d'apprentissage supervis√©",
          "Interface de visualisation des r√©sultats",
          "Matrice de confusion d√©taill√©e",
          "Analyse des performances du mod√®le"
        ],
        challenges: [
          "Pr√©paration et nettoyage du dataset",
          "Optimisation des hyperparam√®tres",
          "Gestion du d√©s√©quilibre des classes",
          "Am√©lioration de la pr√©cision du mod√®le"
        ],
        results: [
          "Pr√©cision de classification de 63.8%",
          "Identification des axes d'am√©lioration",
          "Base solide pour impl√©mentation CNN",
          "Compr√©hension approfondie du machine learning"
        ]
      },
      'Gestion Cabinet Dentaire': {
        description: "Application compl√®te de gestion pour cabinet dentaire incluant la gestion des patients, rendez-vous et dossiers m√©dicaux.",
        features: [
          "Gestion compl√®te des patients",
          "Syst√®me de prise de rendez-vous",
          "Dossiers m√©dicaux √©lectroniques",
          "Interface desktop et web",
          "Rapports et statistiques",
          "Sauvegarde automatique des donn√©es"
        ],
        challenges: [
          "Interface utilisateur intuitive",
          "S√©curit√© des donn√©es m√©dicales",
          "Synchronisation multi-plateforme",
          "Performance avec large volume de donn√©es"
        ],
        results: [
          "Digitalisation compl√®te du cabinet",
          "Am√©lioration de l'efficacit√© administrative",
          "R√©duction des erreurs de saisie",
          "Meilleur suivi des patients"
        ]
      },
      'JEE R√©servations ‚Äì Atl√©tico de Madrid': {
        description: "Plateforme de r√©servation de billets pour les matchs de l'Atl√©tico de Madrid avec gestion des r√¥les et int√©gration API externe.",
        features: [
          "Syst√®me de r√©servation de billets",
          "Gestion des r√¥les utilisateurs",
          "Int√©gration API matchs externe",
          "Interface responsive Bootstrap",
          "Gestion des paiements",
          "Historique des r√©servations"
        ],
        challenges: [
          "Gestion de la concurrence des r√©servations",
          "Int√©gration API externe fiable",
          "S√©curisation des transactions",
          "Interface utilisateur fluide"
        ],
        results: [
          "Syst√®me de r√©servation fonctionnel",
          "Gestion efficace des utilisateurs",
          "Int√©gration API r√©ussie",
          "Interface utilisateur moderne"
        ]
      }
    };

    return details[project?.title] || {
      description: project?.impact || "Description du projet",
      features: ["Fonctionnalit√© principale"],
      challenges: ["D√©fi technique principal"],
      results: ["R√©sultat obtenu"]
    };
  };

  if (!project) return null;

  const projectDetails = getProjectDetails(project);

  return (
    <AnimatePresence>
      {show && (
        <Modal 
          show={show} 
          onHide={onHide} 
          size="lg" 
          centered
          backdrop="static"
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 50 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 50 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <Modal.Header closeButton className="border-bottom">
              <div className="d-flex align-items-center">
                <span className="me-3 fs-3">{getCategoryIcon(project.category)}</span>
                <div>
                  <Modal.Title className="h4 mb-1 text-primary">
                    {project.title}
                  </Modal.Title>
                  <span 
                    className="badge rounded-pill px-3 py-2"
                    style={{ 
                      backgroundColor: getCategoryColor(project.category),
                      color: 'white'
                    }}
                  >
                    {project.category}
                  </span>
                </div>
              </div>
            </Modal.Header>

            <Modal.Body className="py-4">
              <div className="mb-4">
                <h5 className="text-primary mb-3">üìã Description</h5>
                <p className="text-muted">{projectDetails.description}</p>
              </div>

              <div className="mb-4">
                <h5 className="text-primary mb-3">üõ†Ô∏è Technologies utilis√©es</h5>
                <div className="d-flex flex-wrap gap-2">
                  {project.stack.map((tech, index) => (
                    <motion.span
                      key={index}
                      className="badge bg-light text-dark border px-3 py-2"
                      whileHover={{ 
                        scale: 1.05,
                        backgroundColor: getCategoryColor(project.category),
                        color: 'white'
                      }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      {tech}
                    </motion.span>
                  ))}
                </div>
              </div>

              <div className="mb-4">
                <h5 className="text-primary mb-3">‚ú® Fonctionnalit√©s cl√©s</h5>
                <ul className="list-unstyled">
                  {projectDetails.features.map((feature, index) => (
                    <motion.li 
                      key={index} 
                      className="mb-2 d-flex align-items-start"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <span className="text-success me-2">‚ñ∏</span>
                      <span>{feature}</span>
                    </motion.li>
                  ))}
                </ul>
              </div>

              <div className="mb-4">
                <h5 className="text-primary mb-3">üéØ D√©fis techniques</h5>
                <ul className="list-unstyled">
                  {projectDetails.challenges.map((challenge, index) => (
                    <motion.li 
                      key={index} 
                      className="mb-2 d-flex align-items-start"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 + 0.3 }}
                    >
                      <span className="text-warning me-2">‚ö°</span>
                      <span>{challenge}</span>
                    </motion.li>
                  ))}
                </ul>
              </div>

              <div className="mb-4">
                <h5 className="text-primary mb-3">üèÜ R√©sultats obtenus</h5>
                <ul className="list-unstyled">
                  {projectDetails.results.map((result, index) => (
                    <motion.li 
                      key={index} 
                      className="mb-2 d-flex align-items-start"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 + 0.6 }}
                    >
                      <span className="text-success me-2">‚úì</span>
                      <span>{result}</span>
                    </motion.li>
                  ))}
                </ul>
              </div>

              <div className="bg-light rounded p-3">
                <h6 className="text-primary mb-2">üí° Impact du projet</h6>
                <p className="mb-0 text-muted">{project.impact}</p>
              </div>
            </Modal.Body>

            <Modal.Footer className="border-top">
              <Button variant="outline-secondary" onClick={onHide}>
                Fermer
              </Button>
            </Modal.Footer>
          </motion.div>
        </Modal>
      )}
    </AnimatePresence>
  );
};

export default ProjectModal;
